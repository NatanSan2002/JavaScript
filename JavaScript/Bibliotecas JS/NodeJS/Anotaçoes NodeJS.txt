
Por favor, desconsidere as prováveis gafes de definição contidas aqui, uso elas apenas para "fast check" sobre cada comando e sua sintaxe, quando quero uma informação mais detalhada e certa, geralmente busco em sites especializados para isso, como o "W3Schools".



*TERMINAL*

node -v ||| Verifica Versão Atual do Node

npm init ||| Inicia o NPM nesse local criando arquivo package.json, (vai fazer umas perguntas, aperte Enter)

node name_arquivo.js ||| Executa arquivo desse local

ctrl + c ||| Reseta/cancela ação e volta a dar comandos ao terminal


BIBLIOTECAS 

npm install ||| Instala todas as depedencias de um projeto (quando baixa-mos em outra maquina sem o node_modules)

npm install nome_conteudo ||| Instala biblioteca (método só nesse local)

npm install -g nome_conteudo ||| Instala Globalmente 

npm install  nome_conteudo --save-dev ||| Instala como dependencia (algo usado só na produção)

npm run nome_comando  ||| Roda Açoes de uma biblioteca (nome_comando do "scripts" do package.JSON)

*se a biblioteca foi instalada globalmente não precisa criar o comando la no scripts do packageJSON






npm install nodemon  ||| Atualizada servidor automaticamente a cada mudança (recomendado instalar no modo --save-dev) 

npm install express     ||| Servidor Express

npm install mongoose ||| Servidor MONGODB

npm install dotenv       ||| Arquivos .Env, São arquivos que geralmente tem variaveis de valores sensiveis (como senhas), assim são eles que são passados quando esses dados forem pedidos (por no .gitignore obvio)




*JavaScript* 

module.exports = conteudo ||| Exporta uma unica coisa, pode ser uma var, class, objeto, etc

module.exports = {conteudo,} ||| Exporta Varios conteudos dentro de um objeto, separando-os por "," 

const nomevar = require("./nome_arquivo.js") ||| Importa conteudo de outro arquivo (que exportou) 

const {nomevar} = require("./nome_arquivo.js") ||| Var com {destructin} ideal para importção de varios conteudos atraves de um objeto 

require("./nome_arquivo.js") ||| Importação "solta", executa os arquivo sem guarda-lo em uma var 

*Os códigos de um arquivo só funcionam quando são importados por algum 



*Package.JSON* 

"scripts": {"nome_comando": "biblioteca nome_arquivo.js"} ||| Comandos das bibliotecas instaladas a serem usados no npm run 

exemplo: {"starter": "nodemon index.js"} (o nome do comando pode ser qualquer um)





Servidores


Servidor Nativo do NODE

const http = require("http")  ||| Require Fundamental na criação de Servidor 


http.createServer((request,response) => {  ||| os 2 parametros que o método vai usar

response.writeHead(200,{"Content-Type":"text/html"})  ||| Informações do servidor, 200 é que é OK, {"Tipo do Conteudo": "Html,text,Json"}

**Se as resposta.write a seguir não tiver nenhum conteudo informado no "Content-Type" nesse caso "html" o servidor não roda

response.write("<h1> Conteudo</h1>");  ||| Exibição na pagina

response.write(request.url) ||| Um uso do request é ter informaçoes da requisição, nesse caso o link da URL

r.end();  ||| Encerra resposta, para servidor não ficar rodando eternamente

}).listen(numero porta,"numero host",console.log("Mensagem Servidor Rodando"))  ||| Guarda Servidor na porta dada para ser acessado via http://localhost:porta

** numero host pode ser o padrão: 127.0.0.1 (em "str")


const port = process.env.PORT ||| Serve para quando não se sabe qual porta recebera (em uma hospedagem) 




const url = require("url") ||| Require de Query na URL 

var query = url.parse(request.url,true).query; ||| Método Da URL para converter dado em valores de url (query)

*ai a request.url teria que ter o "/?" no começo da url para indicar que existem querys nessa URL

* exemplo: localhost:3000/?var1=dado1&var2=dado2 (separa as variaveis com o &)


query.var1 ||| variavel da query



Servidor Express


terminal* npm install express (instalar com --save ??)

const express = require("express");
const app = express();


app.get("/pag", (req,res) => {    ||| Método Get, "/pag" é a pagina que sera a exibição, arrow function com parametros de request e resposta
 
res.send("Teste Express Server Send")  ||| res.tipo do método, nesse caso é um Send que é um simples texto

});

app.get("/pag2",(req,res) => {
    res.json({Nome33:"Carlos",   ||| método Json, é um JSON
Idade:"25", Email:"Etcetcet@gmail.com" })   
   })


app.listen(numero porta,"numero host",console.log("Mensagem Servidor Rodando"))  ||| Guarda Servidor na porta dada para ser acessado via http://localhost:porta

** numero host pode ser o padrão: 127.0.0.1 (em "str")


const port = process.env.PORT ||| Serve para quando não se sabe qual porta recebera (em uma hospedagem)



const fs = require("fs")

(requisition,response) => {

fs.readFile("Local_arquivo.tipo", (error, arquivo) => { ||| Fs.Read, ler arquivo 

response.writeHead(200,{"Content-Type":"text/html"});

response.write(arquivo);  ||| Exibi Arquivo pego do segundo parametro da arrow do FS.readFile


fs.appendFile("./create_file.txt","Conteudo do arquivo",(error) => { ||| Append File, Cria arquivo e seu conteudo

if(error) throw error;  ||| Erro

});})} 


terminal: npm install router  ||| Instalando Router (recomendado método --save)

const rotas = express.Router()   ||| Métódo de Rotas do Express


rotas.get("/",(req,r) => {  ||| Router() tem o .get() normalmente
r.json({"pag":"padrão"});
})


rotas.get("/:parametro",(req,r) => { /:parametro pode ser dado qualquer nome

const p = req.params.parametro;  ||| é o /:parametro da URL 

if(p == tal_coisa) {
r.status(200).send("Achamos") ||| Status 202 serve para informar que foi sucesso
}else{
r.status(404).send("Not Found") |||  Status 202 serve para informar que não foi achado

}) ||| express.Router() serve para pegarmos um valor da URL e usa-lo para executar diferentes condiçoes (ifs)


** exporta a var rotas para outro arquivo e usar: app.use("/",rotas)  (vai executar a mesma coisa que em cima) ;










